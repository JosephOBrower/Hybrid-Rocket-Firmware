
stm32f411e-disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000200  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000398  080003a0  000013a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000398  08000398  000013a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000398  08000398  000013a0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000398  080003a0  000013a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000398  08000398  00001398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800039c  0800039c  0000139c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003a0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003a0  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000445  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a8  00000000  00000000  00001815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  000019c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004b  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000103d  00000000  00000000  00001a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c40  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003ead  00000000  00000000  00003700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000075ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000dc  00000000  00000000  000075f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  000076cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000380 	.word	0x08000380

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000380 	.word	0x08000380

080001d8 <GPIODClockEnable>:

#include "hal.h"
#include "CMSIS.h"

void GPIODClockEnable(void){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	/*Initalize the GPIOD clock page 118*/
	RCC->AHB1ENR |= (1 << 3);
 80001dc:	4b05      	ldr	r3, [pc, #20]	@ (80001f4 <GPIODClockEnable+0x1c>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e0:	4a04      	ldr	r2, [pc, #16]	@ (80001f4 <GPIODClockEnable+0x1c>)
 80001e2:	f043 0308 	orr.w	r3, r3, #8
 80001e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	40023800 	.word	0x40023800

080001f8 <GPIODSetup>:
void GPIODSetup(int pin, int state){
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
	//0 for input, 1 for output
	switch (state){
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d00f      	beq.n	8000228 <GPIODSetup+0x30>
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	2b01      	cmp	r3, #1
 800020c:	d000      	beq.n	8000210 <GPIODSetup+0x18>
			break;
		case 1:
			/*Set GPIO OUTPUT page 164*/
			GPIOD->MODER |= (1 << (pin * 2));
	}
}
 800020e:	e00c      	b.n	800022a <GPIODSetup+0x32>
			GPIOD->MODER |= (1 << (pin * 2));
 8000210:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <GPIODSetup+0x40>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	687a      	ldr	r2, [r7, #4]
 8000216:	0052      	lsls	r2, r2, #1
 8000218:	2101      	movs	r1, #1
 800021a:	fa01 f202 	lsl.w	r2, r1, r2
 800021e:	4611      	mov	r1, r2
 8000220:	4a05      	ldr	r2, [pc, #20]	@ (8000238 <GPIODSetup+0x40>)
 8000222:	430b      	orrs	r3, r1
 8000224:	6013      	str	r3, [r2, #0]
}
 8000226:	e000      	b.n	800022a <GPIODSetup+0x32>
			break;
 8000228:	bf00      	nop
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40020c00 	.word	0x40020c00

0800023c <GPIODWrite>:

void GPIODWrite(int pin, int state){
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
	switch (state){
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	2b00      	cmp	r3, #0
 800024a:	d003      	beq.n	8000254 <GPIODWrite+0x18>
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	2b01      	cmp	r3, #1
 8000250:	d00d      	beq.n	800026e <GPIODWrite+0x32>
			GPIOD->BSRR |= (1 << (16 + pin));
			break;
		case 1:
			GPIOD->BSRR |= (1 << (pin));
	}
}
 8000252:	e016      	b.n	8000282 <GPIODWrite+0x46>
			GPIOD->BSRR |= (1 << (16 + pin));
 8000254:	4b0e      	ldr	r3, [pc, #56]	@ (8000290 <GPIODWrite+0x54>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	3210      	adds	r2, #16
 800025c:	2101      	movs	r1, #1
 800025e:	fa01 f202 	lsl.w	r2, r1, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a0a      	ldr	r2, [pc, #40]	@ (8000290 <GPIODWrite+0x54>)
 8000266:	430b      	orrs	r3, r1
 8000268:	6193      	str	r3, [r2, #24]
			break;
 800026a:	bf00      	nop
}
 800026c:	e009      	b.n	8000282 <GPIODWrite+0x46>
			GPIOD->BSRR |= (1 << (pin));
 800026e:	4b08      	ldr	r3, [pc, #32]	@ (8000290 <GPIODWrite+0x54>)
 8000270:	699b      	ldr	r3, [r3, #24]
 8000272:	2101      	movs	r1, #1
 8000274:	687a      	ldr	r2, [r7, #4]
 8000276:	fa01 f202 	lsl.w	r2, r1, r2
 800027a:	4611      	mov	r1, r2
 800027c:	4a04      	ldr	r2, [pc, #16]	@ (8000290 <GPIODWrite+0x54>)
 800027e:	430b      	orrs	r3, r1
 8000280:	6193      	str	r3, [r2, #24]
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	40020c00 	.word	0x40020c00

08000294 <main>:
#include "hal.h"
/*All pages numbers are referenced from the rm0383-stm32f411xce-advanced data sheet*/

//#include <CMSIS.h>
/*LED pins are: PD12 Green, PD13 Orange, PD14 Red, PD15*/
int main(void){
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
	/*Initalize the GPIOD clock page 118*/
	//RCC->AHB1ENR = (1 << 3);
	/*Set GPIO OUTPUT page 164*/
	//GPIOD->MODER = (1 << 24);
	//GPIOD->BSRR = (1 << 12);
	GPIODClockEnable();
 800029a:	f7ff ff9d 	bl	80001d8 <GPIODClockEnable>
	GPIODSetup(13, 1);
 800029e:	2101      	movs	r1, #1
 80002a0:	200d      	movs	r0, #13
 80002a2:	f7ff ffa9 	bl	80001f8 <GPIODSetup>
	for(;;){
		for(int i = 0; i <= 100000; i++){}
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	e002      	b.n	80002b2 <main+0x1e>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3301      	adds	r3, #1
 80002b0:	607b      	str	r3, [r7, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	4a0a      	ldr	r2, [pc, #40]	@ (80002e0 <main+0x4c>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	ddf8      	ble.n	80002ac <main+0x18>
		//GPIOD->BSRR = (1 << 12);
		GPIODWrite(13, 1);
 80002ba:	2101      	movs	r1, #1
 80002bc:	200d      	movs	r0, #13
 80002be:	f7ff ffbd 	bl	800023c <GPIODWrite>
		for(int i = 0; i <= 100000; i++){}
 80002c2:	2300      	movs	r3, #0
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	e002      	b.n	80002ce <main+0x3a>
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	3301      	adds	r3, #1
 80002cc:	603b      	str	r3, [r7, #0]
 80002ce:	683b      	ldr	r3, [r7, #0]
 80002d0:	4a03      	ldr	r2, [pc, #12]	@ (80002e0 <main+0x4c>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	ddf8      	ble.n	80002c8 <main+0x34>
		//GPIOD->BSRR = (1 << 28);
		GPIODWrite(13, 0);
 80002d6:	2100      	movs	r1, #0
 80002d8:	200d      	movs	r0, #13
 80002da:	f7ff ffaf 	bl	800023c <GPIODWrite>
		for(int i = 0; i <= 100000; i++){}
 80002de:	e7e2      	b.n	80002a6 <main+0x12>
 80002e0:	000186a0 	.word	0x000186a0

080002e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e4:	480d      	ldr	r0, [pc, #52]	@ (800031c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002ec:	480c      	ldr	r0, [pc, #48]	@ (8000320 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ee:	490d      	ldr	r1, [pc, #52]	@ (8000324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000328 <LoopForever+0xe>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f4:	e002      	b.n	80002fc <LoopCopyDataInit>

080002f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fa:	3304      	adds	r3, #4

080002fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000300:	d3f9      	bcc.n	80002f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000302:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000304:	4c0a      	ldr	r4, [pc, #40]	@ (8000330 <LoopForever+0x16>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000308:	e001      	b.n	800030e <LoopFillZerobss>

0800030a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800030c:	3204      	adds	r2, #4

0800030e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000310:	d3fb      	bcc.n	800030a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000312:	f000 f811 	bl	8000338 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000316:	f7ff ffbd 	bl	8000294 <main>

0800031a <LoopForever>:

LoopForever:
  b LoopForever
 800031a:	e7fe      	b.n	800031a <LoopForever>
  ldr   r0, =_estack
 800031c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000324:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000328:	080003a0 	.word	0x080003a0
  ldr r2, =_sbss
 800032c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000330:	2000001c 	.word	0x2000001c

08000334 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000334:	e7fe      	b.n	8000334 <ADC_IRQHandler>
	...

08000338 <__libc_init_array>:
 8000338:	b570      	push	{r4, r5, r6, lr}
 800033a:	4d0d      	ldr	r5, [pc, #52]	@ (8000370 <__libc_init_array+0x38>)
 800033c:	4c0d      	ldr	r4, [pc, #52]	@ (8000374 <__libc_init_array+0x3c>)
 800033e:	1b64      	subs	r4, r4, r5
 8000340:	10a4      	asrs	r4, r4, #2
 8000342:	2600      	movs	r6, #0
 8000344:	42a6      	cmp	r6, r4
 8000346:	d109      	bne.n	800035c <__libc_init_array+0x24>
 8000348:	4d0b      	ldr	r5, [pc, #44]	@ (8000378 <__libc_init_array+0x40>)
 800034a:	4c0c      	ldr	r4, [pc, #48]	@ (800037c <__libc_init_array+0x44>)
 800034c:	f000 f818 	bl	8000380 <_init>
 8000350:	1b64      	subs	r4, r4, r5
 8000352:	10a4      	asrs	r4, r4, #2
 8000354:	2600      	movs	r6, #0
 8000356:	42a6      	cmp	r6, r4
 8000358:	d105      	bne.n	8000366 <__libc_init_array+0x2e>
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000360:	4798      	blx	r3
 8000362:	3601      	adds	r6, #1
 8000364:	e7ee      	b.n	8000344 <__libc_init_array+0xc>
 8000366:	f855 3b04 	ldr.w	r3, [r5], #4
 800036a:	4798      	blx	r3
 800036c:	3601      	adds	r6, #1
 800036e:	e7f2      	b.n	8000356 <__libc_init_array+0x1e>
 8000370:	08000398 	.word	0x08000398
 8000374:	08000398 	.word	0x08000398
 8000378:	08000398 	.word	0x08000398
 800037c:	0800039c 	.word	0x0800039c

08000380 <_init>:
 8000380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000382:	bf00      	nop
 8000384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000386:	bc08      	pop	{r3}
 8000388:	469e      	mov	lr, r3
 800038a:	4770      	bx	lr

0800038c <_fini>:
 800038c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038e:	bf00      	nop
 8000390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000392:	bc08      	pop	{r3}
 8000394:	469e      	mov	lr, r3
 8000396:	4770      	bx	lr
